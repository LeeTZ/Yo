type Universal:{
    
}

type Int:{
    a: Int;
    func eval(a: Double) -> Int:{
        return;
}
    func eval(a: String) -> Int:{
        return;
}
    func eval(a:Int) -> Int:{
        return;
}
}
type String:{
    b: String;
    func eval(a: Int) -> String:{
        return;
}
    func eval(a: Double) -> String:{
        return;
}
    func eval(a: String) -> String:{
        return;
}
}
type Double:{
    c: Double;
    func eval(a: Int) -> Double:{
        return;
}
    func eval(a: String) -> Double:{
        return;
}
    func eval(a: Double) -> Double:{
        return;
}
}
type Bool:{
    func eval(a: Bool) -> Bool:{
        return;
}
}
type Void:{
    func eval(a: Void) -> Void:{
        return;
    }
}

type ArrayElementT:{
    
}

type Attribute:{
    second: Double;
    value: Double;
}
type Clip:{
    filename: String;
    starttime : Double;
    endtime : Double;
    position : Double;
    alpha : Attribute[];
    location_x : Attribute[];
    location_y : Attribute[];
    scale_x : Attribute[];
    scale_y : Attribute[];
    rotate : Attribute[];
    volume : Attribute[];
    clips:  Clip[];

    func eval(a: String) -> Clip: {
        return;
    }

    func eval(dir: String, ext: String) -> Clip[]: {
        return;
    }

    func save(self: Clip, a: String) -> Void: {
        return;
    }

    func log(self: Clip) -> Void: {
        return;
    }

    func log(self: Clip, a: String) -> Void: {
        return;
    }

}

type Pixel:{
    R: Int;
    G: Int;
    B: Int;
}

type Frame:{
    width: Int;
    height: Int;
    
}

func log(a: Int) -> Int:{
    return;
}

func log(a: Double) -> Double: {
    return;
}

func log(a: String) -> String: {
    return;
}

func log(a: Clip) -> Clip: {
    return;
}

func log(a: Frame) -> Frame: {
    return;
}

func log(a: Attribute) -> Attribute: {
    return;
}


func __Add(a: Int, b: Int) -> Int:{
    return;
}

func __Add(a: Double, b: Double) -> Double:{
    return;
}

func __Add(a: String, b: String) -> String:{
    return;
}

func __Sub(a: Int, b: Int) -> Int:{
    return;
}

func __Sub(a: Double, b: Double) -> Double:{
    return;
}

func __Mult(a: Int, b: Int) -> Int:{
    return;
}

func __Mult(a: Double, b: Double) -> Double:{
    return;
}

func __Div(a: Int, b: Int) -> Int:{
    return;
}

func __Div(a: Double, b: Double) -> Double:{
    return;
}

func __Mod(a: Int, b: Int) -> Int:{
    return;
}

func __Equal(a: Int, b: Int) -> Bool:{
    return;
}

func __Equal(a: String, b: String) -> Bool:{
    return;
}

func __Equal(a: Double, b: Double) -> Bool:{
    return;
}

func __Equal(a: Bool, b: Bool) -> Bool:{
    return;
}


func __Neq(a: Int, b: Int) -> Bool:{
    return;
}

func __Neq(a: String, b: String) -> Bool:{
    return;
}

func __Neq(a: Double, b: Double) -> Bool:{
    return;
}

func __Neq(a: Bool, b: Bool) -> Bool:{
    return;
}

func __Less(a: Int, b: Int) -> Bool:{
    return;
}

func __Less(a: Double, b: Double) -> Bool:{
    return;
}

func __Leq(a: Int, b: Int) -> Bool:{
    return;
}

func __Leq(a: Double, b: Double) -> Bool:{
    return;
}

func __Geq(a: Int, b: Int) -> Bool:{
    return;
}

func __Geq(a: Double, b: Double) -> Bool:{
    return;
}

func __Gt(a: Int, b: Int) -> Bool:{
    return;
}

func __Gt(a: Double, b: Double) -> Bool:{
    return;
}

func __And(a: Bool, b: Bool) -> Bool:{
    return;
}

func __Or(a: Bool, b: Bool) -> Bool:{
    return;
}

type Array:{
    length: Int;
    empty: Bool;

    func add(self: Array, ele: ArrayElementT) -> Array:{
        return;
    }
}