type token =
  | INDENT
  | NEWLINE
  | SEMI
  | LPAREN
  | RPAREN
  | LBRACKET
  | RBRACKET
  | LBRACE
  | RBRACE
  | COMMA
  | DOT
  | TILDE
  | QUOTATION
  | COLON
  | PLUS
  | MINUS
  | TIMES
  | DIVIDE
  | ASSIGN
  | MOD
  | AND
  | OR
  | AMPERSAND
  | EXCLAMATION
  | EQ
  | NEQ
  | LT
  | LEQ
  | GT
  | GEQ
  | RETURN
  | IF
  | ELSE
  | ELIF
  | FOR
  | WHILE
  | IN
  | TO
  | CONTINUE
  | BREAK
  | INT
  | DOUBLE
  | BOOL
  | STRING
  | ARRAY
  | LAMBDA
  | FUNCTION
  | GLOBAL
  | TYPE
  | EVAL
  | FRAME
  | CLIP
  | RIGHTARROW
  | LEFTARROW
  | CASCADE
  | LOG
  | IntLITERAL of (int)
  | DoubleLITERAL of (float)
  | StringLITERAL of (string)
  | BoolLITERAL of (bool)
  | ID of (string)
  | EOF

open Parsing;;
let _ = parse_error;;
let yytransl_const = [|
  257 (* INDENT *);
  258 (* NEWLINE *);
  259 (* SEMI *);
  260 (* LPAREN *);
  261 (* RPAREN *);
  262 (* LBRACKET *);
  263 (* RBRACKET *);
  264 (* LBRACE *);
  265 (* RBRACE *);
  266 (* COMMA *);
  267 (* DOT *);
  268 (* TILDE *);
  269 (* QUOTATION *);
  270 (* COLON *);
  271 (* PLUS *);
  272 (* MINUS *);
  273 (* TIMES *);
  274 (* DIVIDE *);
  275 (* ASSIGN *);
  276 (* MOD *);
  277 (* AND *);
  278 (* OR *);
  279 (* AMPERSAND *);
  280 (* EXCLAMATION *);
  281 (* EQ *);
  282 (* NEQ *);
  283 (* LT *);
  284 (* LEQ *);
  285 (* GT *);
  286 (* GEQ *);
  287 (* RETURN *);
  288 (* IF *);
  289 (* ELSE *);
  290 (* ELIF *);
  291 (* FOR *);
  292 (* WHILE *);
  293 (* IN *);
  294 (* TO *);
  295 (* CONTINUE *);
  296 (* BREAK *);
  297 (* INT *);
  298 (* DOUBLE *);
  299 (* BOOL *);
  300 (* STRING *);
  301 (* ARRAY *);
  302 (* LAMBDA *);
  303 (* FUNCTION *);
  304 (* GLOBAL *);
  305 (* TYPE *);
  306 (* EVAL *);
  307 (* FRAME *);
  308 (* CLIP *);
  309 (* RIGHTARROW *);
  310 (* LEFTARROW *);
  311 (* CASCADE *);
  312 (* LOG *);
    0 (* EOF *);
    0|]

let yytransl_block = [|
  313 (* IntLITERAL *);
  314 (* DoubleLITERAL *);
  315 (* StringLITERAL *);
  316 (* BoolLITERAL *);
  317 (* ID *);
    0|]

let yylhs = "\255\255\
\002\000\002\000\002\000\002\000\002\000\003\000\005\000\005\000\
\005\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\006\000\006\000\006\000\006\000\006\000\006\000\006\000\006\000\
\004\000\004\000\007\000\007\000\008\000\008\000\008\000\008\000\
\008\000\008\000\008\000\008\000\008\000\008\000\008\000\008\000\
\012\000\012\000\001\000\001\000\009\000\009\000\009\000\011\000\
\011\000\010\000\013\000\013\000\000\000"

let yylen = "\002\000\
\001\000\001\000\001\000\001\000\001\000\003\000\001\000\004\000\
\003\000\001\000\001\000\003\000\003\000\003\000\003\000\003\000\
\003\000\003\000\003\000\003\000\003\000\003\000\004\000\003\000\
\000\000\001\000\001\000\003\000\002\000\005\000\003\000\003\000\
\005\000\008\000\010\000\012\000\002\000\002\000\002\000\003\000\
\001\000\001\000\000\000\001\000\001\000\001\000\002\000\000\000\
\001\000\007\000\002\000\003\000\002\000"

let yydefred = "\000\000\
\000\000\000\000\045\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\001\000\002\000\003\000\
\004\000\000\000\053\000\011\000\005\000\000\000\000\000\046\000\
\000\000\000\000\000\000\000\000\000\000\000\000\039\000\000\000\
\000\000\000\000\000\000\000\000\037\000\038\000\000\000\000\000\
\000\000\000\000\000\000\029\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\047\000\024\000\
\006\000\000\000\000\000\040\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\031\000\000\000\000\000\009\000\000\000\
\000\000\000\000\014\000\015\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\051\000\000\000\000\000\
\000\000\041\000\042\000\000\000\000\000\023\000\008\000\030\000\
\000\000\033\000\052\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\050\000\000\000\
\000\000\034\000\000\000\000\000\000\000\035\000\000\000\036\000"

let yydgoto = "\002\000\
\019\000\020\000\021\000\027\000\022\000\023\000\029\000\024\000\
\025\000\034\000\063\000\092\000\064\000"

let yysindex = "\009\000\
\072\255\000\000\000\000\085\255\085\255\027\255\056\255\085\255\
\233\254\085\255\039\255\041\255\085\255\000\000\000\000\000\000\
\000\000\055\255\000\000\000\000\000\000\013\255\225\255\000\000\
\130\255\008\001\058\255\056\001\057\255\072\255\000\000\232\000\
\027\001\045\255\236\254\033\001\000\000\000\000\238\000\085\255\
\085\255\012\255\085\255\000\000\085\255\085\255\085\255\085\255\
\085\255\085\255\085\255\085\255\085\255\085\255\000\000\000\000\
\000\000\085\255\062\255\000\000\067\255\085\255\048\255\049\255\
\085\255\002\255\074\255\000\000\080\255\252\255\000\000\056\001\
\038\255\038\255\000\000\000\000\072\001\072\001\254\254\254\254\
\254\254\254\254\056\001\086\255\090\255\000\000\085\255\085\255\
\002\001\000\000\000\000\081\255\094\255\000\000\000\000\000\000\
\130\255\000\000\000\000\085\255\092\255\130\255\096\255\050\001\
\104\255\100\255\108\255\116\255\130\255\123\255\000\000\124\255\
\118\255\000\000\130\255\133\255\128\255\000\000\137\255\000\000"

let yyrindex = "\000\000\
\140\000\000\000\000\000\000\000\134\255\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\190\255\000\000\000\000\000\000\219\255\000\000\000\000\
\147\000\000\000\000\000\015\255\030\255\000\000\000\000\000\000\
\000\000\001\000\000\000\000\000\000\000\000\000\000\000\144\255\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\069\000\011\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\016\255\
\108\000\137\000\000\000\000\000\081\000\207\000\146\255\166\000\
\172\000\201\000\026\255\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000"

let yygindex = "\000\000\
\000\000\000\000\084\000\112\000\000\000\255\255\000\000\231\255\
\124\000\196\255\000\000\000\000\000\000"

let yytablesize = 614
let yytable = "\055\000\
\048\000\086\000\026\000\028\000\065\000\032\000\033\000\005\000\
\036\000\001\000\049\000\039\000\045\000\046\000\047\000\048\000\
\066\000\022\000\041\000\027\000\022\000\027\000\022\000\042\000\
\027\000\022\000\098\000\099\000\030\000\022\000\028\000\043\000\
\028\000\055\000\026\000\028\000\026\000\035\000\028\000\070\000\
\037\000\072\000\038\000\073\000\074\000\075\000\076\000\077\000\
\078\000\079\000\080\000\081\000\082\000\022\000\047\000\048\000\
\083\000\031\000\040\000\004\000\033\000\005\000\090\000\089\000\
\057\000\004\000\058\000\005\000\032\000\006\000\084\000\103\000\
\071\000\003\000\085\000\004\000\106\000\005\000\062\000\006\000\
\087\000\093\000\088\000\113\000\094\000\033\000\033\000\096\000\
\004\000\117\000\005\000\097\000\007\000\008\000\101\000\102\000\
\009\000\010\000\104\000\105\000\011\000\012\000\007\000\008\000\
\107\000\109\000\009\000\010\000\110\000\111\000\011\000\012\000\
\014\000\015\000\016\000\017\000\018\000\013\000\014\000\015\000\
\016\000\017\000\018\000\112\000\114\000\115\000\116\000\013\000\
\014\000\015\000\016\000\017\000\018\000\004\000\118\000\005\000\
\119\000\006\000\120\000\043\000\025\000\014\000\015\000\016\000\
\017\000\018\000\044\000\018\000\025\000\091\000\018\000\069\000\
\018\000\059\000\000\000\018\000\000\000\000\000\000\000\018\000\
\007\000\008\000\000\000\000\000\009\000\010\000\000\000\000\000\
\011\000\012\000\018\000\018\000\018\000\018\000\018\000\018\000\
\000\000\000\000\000\000\000\000\000\000\000\000\000\000\018\000\
\000\000\013\000\014\000\015\000\016\000\017\000\018\000\007\000\
\000\000\000\000\007\000\007\000\007\000\000\000\000\000\007\000\
\007\000\000\000\000\000\007\000\007\000\007\000\007\000\007\000\
\007\000\000\000\000\000\000\000\000\000\000\000\007\000\007\000\
\007\000\007\000\007\000\007\000\010\000\000\000\000\000\010\000\
\000\000\010\000\044\000\007\000\010\000\000\000\000\000\000\000\
\010\000\010\000\010\000\010\000\010\000\000\000\000\000\045\000\
\046\000\047\000\048\000\010\000\010\000\010\000\010\000\010\000\
\010\000\049\000\050\000\051\000\052\000\053\000\054\000\000\000\
\010\000\000\000\095\000\000\000\048\000\000\000\048\000\000\000\
\048\000\048\000\045\000\046\000\047\000\048\000\049\000\000\000\
\049\000\000\000\049\000\049\000\049\000\050\000\051\000\052\000\
\053\000\054\000\000\000\000\000\000\000\000\000\000\000\048\000\
\048\000\048\000\000\000\048\000\048\000\000\000\000\000\048\000\
\048\000\049\000\049\000\049\000\000\000\049\000\049\000\000\000\
\000\000\049\000\049\000\000\000\000\000\000\000\000\000\000\000\
\048\000\048\000\048\000\048\000\048\000\048\000\000\000\000\000\
\000\000\000\000\049\000\049\000\049\000\049\000\049\000\049\000\
\032\000\000\000\032\000\000\000\032\000\032\000\000\000\000\000\
\000\000\000\000\016\000\000\000\000\000\016\000\000\000\016\000\
\000\000\000\000\016\000\000\000\000\000\000\000\016\000\000\000\
\000\000\000\000\000\000\032\000\032\000\000\000\000\000\032\000\
\032\000\016\000\016\000\032\000\032\000\012\000\000\000\000\000\
\012\000\000\000\012\000\000\000\000\000\012\000\016\000\000\000\
\000\000\012\000\012\000\012\000\032\000\032\000\032\000\032\000\
\032\000\032\000\000\000\000\000\012\000\012\000\012\000\012\000\
\012\000\012\000\013\000\000\000\000\000\013\000\000\000\013\000\
\000\000\012\000\013\000\000\000\000\000\000\000\013\000\013\000\
\013\000\000\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\013\000\013\000\013\000\013\000\013\000\013\000\019\000\
\000\000\000\000\019\000\000\000\019\000\020\000\013\000\019\000\
\020\000\000\000\020\000\019\000\000\000\020\000\000\000\000\000\
\000\000\020\000\000\000\000\000\000\000\000\000\019\000\019\000\
\019\000\019\000\019\000\019\000\020\000\020\000\020\000\020\000\
\020\000\020\000\021\000\019\000\000\000\021\000\000\000\021\000\
\017\000\020\000\021\000\017\000\000\000\017\000\021\000\000\000\
\017\000\000\000\000\000\000\000\017\000\000\000\000\000\000\000\
\000\000\021\000\021\000\021\000\021\000\021\000\021\000\017\000\
\017\000\060\000\000\000\000\000\000\000\000\000\021\000\068\000\
\000\000\000\000\000\000\000\000\017\000\000\000\045\000\046\000\
\047\000\048\000\000\000\000\000\045\000\046\000\047\000\048\000\
\049\000\050\000\051\000\052\000\053\000\054\000\049\000\050\000\
\051\000\052\000\053\000\054\000\056\000\000\000\000\000\000\000\
\045\000\046\000\047\000\048\000\000\000\000\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\049\000\050\000\051\000\052\000\053\000\054\000\000\000\100\000\
\061\000\045\000\046\000\047\000\048\000\000\000\067\000\045\000\
\046\000\047\000\048\000\049\000\050\000\051\000\052\000\053\000\
\054\000\049\000\050\000\051\000\052\000\053\000\054\000\108\000\
\045\000\046\000\047\000\048\000\000\000\000\000\045\000\046\000\
\047\000\048\000\049\000\050\000\051\000\052\000\053\000\054\000\
\049\000\050\000\051\000\052\000\053\000\054\000\045\000\046\000\
\047\000\048\000\000\000\000\000\000\000\000\000\000\000\000\000\
\000\000\000\000\051\000\052\000\053\000\054\000"

let yycheck = "\025\000\
\000\000\062\000\004\000\005\000\025\001\007\000\008\000\006\001\
\010\000\001\000\000\000\013\000\015\001\016\001\017\001\018\001\
\037\001\002\001\006\001\005\001\005\001\007\001\007\001\011\001\
\010\001\010\001\087\000\088\000\002\001\014\001\005\001\019\001\
\007\001\059\000\005\001\010\001\007\001\061\001\040\000\041\000\
\002\001\043\000\002\001\045\000\046\000\047\000\048\000\049\000\
\050\000\051\000\052\000\053\000\054\000\038\001\017\001\018\001\
\058\000\002\001\004\001\004\001\062\000\006\001\061\001\065\000\
\007\001\004\001\010\001\006\001\000\000\008\001\009\001\097\000\
\061\001\002\001\008\001\004\001\102\000\006\001\034\001\008\001\
\033\001\008\001\034\001\109\000\005\001\087\000\088\000\002\001\
\004\001\115\000\006\001\002\001\031\001\032\001\014\001\002\001\
\035\001\036\001\100\000\008\001\039\001\040\001\031\001\032\001\
\009\001\002\001\035\001\036\001\009\001\002\001\039\001\040\001\
\057\001\058\001\059\001\060\001\061\001\056\001\057\001\058\001\
\059\001\060\001\061\001\008\001\002\001\002\001\009\001\056\001\
\057\001\058\001\059\001\060\001\061\001\004\001\002\001\006\001\
\009\001\008\001\002\001\000\000\007\001\057\001\058\001\059\001\
\060\001\061\001\000\000\002\001\005\001\066\000\005\001\040\000\
\007\001\030\000\255\255\010\001\255\255\255\255\255\255\014\001\
\031\001\032\001\255\255\255\255\035\001\036\001\255\255\255\255\
\039\001\040\001\025\001\026\001\027\001\028\001\029\001\030\001\
\255\255\255\255\255\255\255\255\255\255\255\255\255\255\038\001\
\255\255\056\001\057\001\058\001\059\001\060\001\061\001\002\001\
\255\255\255\255\005\001\006\001\007\001\255\255\255\255\010\001\
\011\001\255\255\255\255\014\001\015\001\016\001\017\001\018\001\
\019\001\255\255\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\002\001\255\255\255\255\005\001\
\255\255\007\001\002\001\038\001\010\001\255\255\255\255\255\255\
\014\001\015\001\016\001\017\001\018\001\255\255\255\255\015\001\
\016\001\017\001\018\001\025\001\026\001\027\001\028\001\029\001\
\030\001\025\001\026\001\027\001\028\001\029\001\030\001\255\255\
\038\001\255\255\007\001\255\255\004\001\255\255\006\001\255\255\
\008\001\009\001\015\001\016\001\017\001\018\001\004\001\255\255\
\006\001\255\255\008\001\009\001\025\001\026\001\027\001\028\001\
\029\001\030\001\255\255\255\255\255\255\255\255\255\255\031\001\
\032\001\033\001\255\255\035\001\036\001\255\255\255\255\039\001\
\040\001\031\001\032\001\033\001\255\255\035\001\036\001\255\255\
\255\255\039\001\040\001\255\255\255\255\255\255\255\255\255\255\
\056\001\057\001\058\001\059\001\060\001\061\001\255\255\255\255\
\255\255\255\255\056\001\057\001\058\001\059\001\060\001\061\001\
\004\001\255\255\006\001\255\255\008\001\009\001\255\255\255\255\
\255\255\255\255\002\001\255\255\255\255\005\001\255\255\007\001\
\255\255\255\255\010\001\255\255\255\255\255\255\014\001\255\255\
\255\255\255\255\255\255\031\001\032\001\255\255\255\255\035\001\
\036\001\025\001\026\001\039\001\040\001\002\001\255\255\255\255\
\005\001\255\255\007\001\255\255\255\255\010\001\038\001\255\255\
\255\255\014\001\015\001\016\001\056\001\057\001\058\001\059\001\
\060\001\061\001\255\255\255\255\025\001\026\001\027\001\028\001\
\029\001\030\001\002\001\255\255\255\255\005\001\255\255\007\001\
\255\255\038\001\010\001\255\255\255\255\255\255\014\001\015\001\
\016\001\255\255\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\002\001\
\255\255\255\255\005\001\255\255\007\001\002\001\038\001\010\001\
\005\001\255\255\007\001\014\001\255\255\010\001\255\255\255\255\
\255\255\014\001\255\255\255\255\255\255\255\255\025\001\026\001\
\027\001\028\001\029\001\030\001\025\001\026\001\027\001\028\001\
\029\001\030\001\002\001\038\001\255\255\005\001\255\255\007\001\
\002\001\038\001\010\001\005\001\255\255\007\001\014\001\255\255\
\010\001\255\255\255\255\255\255\014\001\255\255\255\255\255\255\
\255\255\025\001\026\001\027\001\028\001\029\001\030\001\025\001\
\026\001\002\001\255\255\255\255\255\255\255\255\038\001\002\001\
\255\255\255\255\255\255\255\255\038\001\255\255\015\001\016\001\
\017\001\018\001\255\255\255\255\015\001\016\001\017\001\018\001\
\025\001\026\001\027\001\028\001\029\001\030\001\025\001\026\001\
\027\001\028\001\029\001\030\001\005\001\255\255\255\255\255\255\
\015\001\016\001\017\001\018\001\255\255\255\255\015\001\016\001\
\017\001\018\001\025\001\026\001\027\001\028\001\029\001\030\001\
\025\001\026\001\027\001\028\001\029\001\030\001\255\255\038\001\
\014\001\015\001\016\001\017\001\018\001\255\255\014\001\015\001\
\016\001\017\001\018\001\025\001\026\001\027\001\028\001\029\001\
\030\001\025\001\026\001\027\001\028\001\029\001\030\001\014\001\
\015\001\016\001\017\001\018\001\255\255\255\255\015\001\016\001\
\017\001\018\001\025\001\026\001\027\001\028\001\029\001\030\001\
\025\001\026\001\027\001\028\001\029\001\030\001\015\001\016\001\
\017\001\018\001\255\255\255\255\255\255\255\255\255\255\255\255\
\255\255\255\255\027\001\028\001\029\001\030\001"

let yynames_const = "\
  INDENT\000\
  NEWLINE\000\
  SEMI\000\
  LPAREN\000\
  RPAREN\000\
  LBRACKET\000\
  RBRACKET\000\
  LBRACE\000\
  RBRACE\000\
  COMMA\000\
  DOT\000\
  TILDE\000\
  QUOTATION\000\
  COLON\000\
  PLUS\000\
  MINUS\000\
  TIMES\000\
  DIVIDE\000\
  ASSIGN\000\
  MOD\000\
  AND\000\
  OR\000\
  AMPERSAND\000\
  EXCLAMATION\000\
  EQ\000\
  NEQ\000\
  LT\000\
  LEQ\000\
  GT\000\
  GEQ\000\
  RETURN\000\
  IF\000\
  ELSE\000\
  ELIF\000\
  FOR\000\
  WHILE\000\
  IN\000\
  TO\000\
  CONTINUE\000\
  BREAK\000\
  INT\000\
  DOUBLE\000\
  BOOL\000\
  STRING\000\
  ARRAY\000\
  LAMBDA\000\
  FUNCTION\000\
  GLOBAL\000\
  TYPE\000\
  EVAL\000\
  FRAME\000\
  CLIP\000\
  RIGHTARROW\000\
  LEFTARROW\000\
  CASCADE\000\
  LOG\000\
  EOF\000\
  "

let yynames_block = "\
  IntLITERAL\000\
  DoubleLITERAL\000\
  StringLITERAL\000\
  BoolLITERAL\000\
  ID\000\
  "

let yyact = [|
  (fun _ -> failwith "parser")
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : int) in
    Obj.repr(
# 38 "parser.mly"
                                            ( IntCon _1 )
# 447 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : float) in
    Obj.repr(
# 39 "parser.mly"
                                            ( DoubleCon _1 )
# 454 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 40 "parser.mly"
                                            ( StrCon _1 )
# 461 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : bool) in
    Obj.repr(
# 41 "parser.mly"
                                            ( BoolCon _1 )
# 468 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_literal) in
    Obj.repr(
# 42 "parser.mly"
                                            ( Array _1  )
# 475 "parser.ml"
               : 'constant))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'arg_expr_opt) in
    Obj.repr(
# 45 "parser.mly"
                                            ( _2 )
# 482 "parser.ml"
               : 'array_literal))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 48 "parser.mly"
                                             ( Id _1 )
# 489 "parser.ml"
               : 'primary_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : 'primary_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 49 "parser.mly"
                                             ( Array(_1,_3) )
# 497 "parser.ml"
               : 'primary_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 50 "parser.mly"
                                             ( Dot_Expr(_1,_3) )
# 505 "parser.ml"
               : 'primary_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'primary_expr) in
    Obj.repr(
# 53 "parser.mly"
                                             ( _1 )
# 512 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'constant) in
    Obj.repr(
# 54 "parser.mly"
                                             ( _1 )
# 519 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 55 "parser.mly"
                                             ( Binop(_1, Add,   _3) )
# 527 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 56 "parser.mly"
                                             ( Binop(_1, Sub,   _3) )
# 535 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 57 "parser.mly"
                                             ( Binop(_1, Mult,  _3) )
# 543 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 58 "parser.mly"
                                             ( Binop(_1, Div,   _3) )
# 551 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 59 "parser.mly"
                                             ( Binop(_1, Equal, _3) )
# 559 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 60 "parser.mly"
                                             ( Binop(_1, Neq,   _3) )
# 567 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 61 "parser.mly"
                                             ( Binop(_1, Less,  _3) )
# 575 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 62 "parser.mly"
                                             ( Binop(_1, Leq,   _3) )
# 583 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 63 "parser.mly"
                                             ( Binop(_1, Greater,  _3) )
# 591 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 64 "parser.mly"
                                             ( Binop(_1, Geq,   _3) )
# 599 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'primary_expr) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 65 "parser.mly"
                                             ( Assign(_1, _3) )
# 607 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 3 : string) in
    let _3 = (Parsing.peek_val __caml_parser_env 1 : 'arg_expr_opt) in
    Obj.repr(
# 66 "parser.mly"
                                             ( Call(_1, _3) )
# 615 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 67 "parser.mly"
                                             ( _2 )
# 622 "parser.ml"
               : 'expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 70 "parser.mly"
                                             ( [] )
# 628 "parser.ml"
               : 'arg_expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'arg_expr_list) in
    Obj.repr(
# 71 "parser.mly"
                                             ( List.rev _1 )
# 635 "parser.ml"
               : 'arg_expr_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 74 "parser.mly"
                                             ( [_1] )
# 642 "parser.ml"
               : 'arg_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'arg_expr_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'expr) in
    Obj.repr(
# 75 "parser.mly"
                                             ( _3 :: _1 )
# 650 "parser.ml"
               : 'arg_expr_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 78 "parser.mly"
                                                                                ( Stmt(Some(_1)) )
# 657 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'statement_list) in
    Obj.repr(
# 80 "parser.mly"
                                                                                ( Brace_Stmt(Some(List.rev _3)) )
# 664 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 81 "parser.mly"
                                                                                ( Log(_2) )
# 671 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'if_statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'elif_opt) in
    Obj.repr(
# 82 "parser.mly"
                                   ( If(_2, _3))
# 679 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 3 : 'if_statement) in
    let _3 = (Parsing.peek_val __caml_parser_env 2 : 'elif_opt) in
    let _5 = (Parsing.peek_val __caml_parser_env 0 : 'if_statement) in
    Obj.repr(
# 83 "parser.mly"
                                                  ( If(_2, _3, _5) )
# 688 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    Obj.repr(
# 84 "parser.mly"
                                                                                                           ( While(_2, _6) )
# 696 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 8 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 6 : 'for_in_expr) in
    let _8 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    Obj.repr(
# 85 "parser.mly"
                                                                                                              ( For_in(_4, _8) )
# 705 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 10 : string) in
    let _4 = (Parsing.peek_val __caml_parser_env 8 : 'expr) in
    let _6 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _10 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    Obj.repr(
# 86 "parser.mly"
                                                                                                     ( For_eq(_4, _6, _10)  )
# 715 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 87 "parser.mly"
                                                                                ( CONTINUE )
# 721 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 88 "parser.mly"
                                                                                ( BREAK )
# 727 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    Obj.repr(
# 89 "parser.mly"
                                                                                ( RETURN )
# 733 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 1 : 'expr) in
    Obj.repr(
# 90 "parser.mly"
                                                                                ( Return(_2) )
# 740 "parser.ml"
               : 'statement))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : string) in
    Obj.repr(
# 93 "parser.mly"
                  (_1)
# 747 "parser.ml"
               : 'for_in_expr))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'array_literal) in
    Obj.repr(
# 94 "parser.mly"
                  (_1)
# 754 "parser.ml"
               : 'for_in_expr))
; (fun __caml_parser_env ->
    Obj.repr(
# 97 "parser.mly"
                  ( [] )
# 760 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement_list) in
    Obj.repr(
# 98 "parser.mly"
                     ( List.rev _1 )
# 767 "parser.ml"
               : int))
; (fun __caml_parser_env ->
    Obj.repr(
# 101 "parser.mly"
                 ( [] )
# 773 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 102 "parser.mly"
              ( Stmt(Some(_1)) )
# 780 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 1 : 'statement_list) in
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'statement) in
    Obj.repr(
# 103 "parser.mly"
                             ( _2 :: _1 )
# 788 "parser.ml"
               : 'statement_list))
; (fun __caml_parser_env ->
    Obj.repr(
# 106 "parser.mly"
                ( [] )
# 794 "parser.ml"
               : 'elif_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 0 : 'elif_list) in
    Obj.repr(
# 107 "parser.mly"
              ( List.rev _1 )
# 801 "parser.ml"
               : 'elif_opt))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 6 : 'expr) in
    let _5 = (Parsing.peek_val __caml_parser_env 2 : 'statement) in
    Obj.repr(
# 110 "parser.mly"
                                                     ( IfStmt(_1,_5) )
# 809 "parser.ml"
               : 'if_statement))
; (fun __caml_parser_env ->
    let _2 = (Parsing.peek_val __caml_parser_env 0 : 'if_statement) in
    Obj.repr(
# 113 "parser.mly"
                      (_2)
# 816 "parser.ml"
               : 'elif_list))
; (fun __caml_parser_env ->
    let _1 = (Parsing.peek_val __caml_parser_env 2 : 'elif_list) in
    let _3 = (Parsing.peek_val __caml_parser_env 0 : 'if_statement) in
    Obj.repr(
# 114 "parser.mly"
                                ( _3 :: _1 )
# 824 "parser.ml"
               : 'elif_list))
(* Entry statement_opt *)
; (fun __caml_parser_env -> raise (Parsing.YYexit (Parsing.peek_val __caml_parser_env 0)))
|]
let yytables =
  { Parsing.actions=yyact;
    Parsing.transl_const=yytransl_const;
    Parsing.transl_block=yytransl_block;
    Parsing.lhs=yylhs;
    Parsing.len=yylen;
    Parsing.defred=yydefred;
    Parsing.dgoto=yydgoto;
    Parsing.sindex=yysindex;
    Parsing.rindex=yyrindex;
    Parsing.gindex=yygindex;
    Parsing.tablesize=yytablesize;
    Parsing.table=yytable;
    Parsing.check=yycheck;
    Parsing.error_function=parse_error;
    Parsing.names_const=yynames_const;
    Parsing.names_block=yynames_block }
let statement_opt (lexfun : Lexing.lexbuf -> token) (lexbuf : Lexing.lexbuf) =
   (Parsing.yyparse yytables 1 lexfun lexbuf : int)
